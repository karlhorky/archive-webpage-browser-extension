diff --git a/dist/index.d.mts b/dist/index.d.mts
new file mode 100644
index 0000000000000000000000000000000000000000..e6bb7df73f8e11f1d159016cd0ef3af156c33665
--- /dev/null
+++ b/dist/index.d.mts
@@ -0,0 +1,69 @@
+import { TransformOptions, ParserOptions } from '@babel/core';
+import { ResolvedConfig, PluginOption } from 'vite';
+
+interface Options {
+    include?: string | RegExp | Array<string | RegExp>;
+    exclude?: string | RegExp | Array<string | RegExp>;
+    /**
+     * Enable `react-refresh` integration. Vite disables this in prod env or build mode.
+     * @default true
+     */
+    fastRefresh?: boolean;
+    /**
+     * Set this to `"automatic"` to use [vite-react-jsx](https://github.com/alloc/vite-react-jsx).
+     * @default "automatic"
+     */
+    jsxRuntime?: 'classic' | 'automatic';
+    /**
+     * Control where the JSX factory is imported from.
+     * This option is ignored when `jsxRuntime` is not `"automatic"`.
+     * @default "react"
+     */
+    jsxImportSource?: string;
+    /**
+     * Set this to `true` to annotate the JSX factory with `\/* @__PURE__ *\/`.
+     * This option is ignored when `jsxRuntime` is not `"automatic"`.
+     * @default true
+     */
+    jsxPure?: boolean;
+    /**
+     * Babel configuration applied in both dev and prod.
+     */
+    babel?: BabelOptions | ((id: string, options: {
+        ssr?: boolean;
+    }) => BabelOptions);
+}
+type BabelOptions = Omit<TransformOptions, 'ast' | 'filename' | 'root' | 'sourceFileName' | 'sourceMaps' | 'inputSourceMap'>;
+/**
+ * The object type used by the `options` passed to plugins with
+ * an `api.reactBabel` method.
+ */
+interface ReactBabelOptions extends BabelOptions {
+    plugins: Extract<BabelOptions['plugins'], any[]>;
+    presets: Extract<BabelOptions['presets'], any[]>;
+    overrides: Extract<BabelOptions['overrides'], any[]>;
+    parserOpts: ParserOptions & {
+        plugins: Extract<ParserOptions['plugins'], any[]>;
+    };
+}
+type ReactBabelHook = (babelConfig: ReactBabelOptions, context: ReactBabelHookContext, config: ResolvedConfig) => void;
+type ReactBabelHookContext = {
+    ssr: boolean;
+    id: string;
+};
+declare module 'vite' {
+    interface Plugin {
+        api?: {
+            /**
+             * Manipulate the Babel options of `@vitejs/plugin-react`
+             */
+            reactBabel?: ReactBabelHook;
+        };
+    }
+}
+declare function viteReact(opts?: Options): PluginOption[];
+declare namespace viteReact {
+    var preambleCode: string;
+}
+
+export { BabelOptions, Options, ReactBabelOptions, viteReact as default };
diff --git a/package.json b/package.json
index 3803abcd08258a2a7ba4f84aa0d644c293a216e0..7eca12fa3b1111ab8de0b7d541df1d877aa888b7 100644
--- a/package.json
+++ b/package.json
@@ -15,7 +15,6 @@
   "types": "./dist/index.d.ts",
   "exports": {
     ".": {
-      "types": "./dist/index.d.ts",
       "import": "./dist/index.mjs",
       "require": "./dist/index.cjs"
     }